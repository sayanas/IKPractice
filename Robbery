/**
 * Created by swagatb on 5/11/17.
 */
public class H48 {
    /*
    Robber can rob only non adjacent houses.
    He tries to rob to get max profit.
    Start from behind
    At every index, there are 2 options
    1) Take that house + house-2
    2) Take house-1
    return max of (1) and (2)

    time complexity (DP) -  O(n)
    Space complexity (DP) - O(n)

    time complexity (Recursion) - degree = 2 , ht = n O(2^n)

     */
    public static int maxValueDP(int[] houses)
    {
        int[] dp = new int[houses.length];
        dp[0] = 6;
        dp[1] = Math.max(houses[0], houses[1]);
        for(int i=2; i<houses.length; i++)
            dp[i] = Math.max(houses[i] + dp[i-2], dp[i-1]);

        return dp[houses.length-1];
    }
    public static int maxValueRecur(int[] houses , int l)
    {
        if(l==0)
            return houses[l];

        if(l==1)
            return Math.max(houses[0], houses[1]);

        return Math.max(houses[l] + maxValueRecur(houses, l-2), maxValueRecur(houses, l-1));
    }
    public static void main(String[] args)
    {
        int[] houses = {6, 1, 2, 7};
        System.out.format("Max Value using DP = %d", maxValueDP(houses));
        System.out.format("\nMax Value using Recursion = %d", maxValueRecur(houses, houses.length-1));
    }
}
