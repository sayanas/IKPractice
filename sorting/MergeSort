/**
 * Created by swagatb on 7/30/17.
 */
/*
1) mergeSort(array, low, high)
   {
      if(high<=low)
        return
      mid = low+(high-low)/2
      mergeSort(array, low, mid)
      mergeSort(array, mid+1, low)
      merge(array, low, mid, high)
   }

   merge(array, low, mid, high)
   {
     //copy all elements from low to high into arrayC
     i=low, j=mid+1
     k=low
     while(i<=mid && j<=high)
     {
        if(arrayC[i] <= arrayC[j)
          arrayC[k++] = arratC[i++]
        else
          arrayC[k++] = arrayC[j++]
     }

     while(i<=mid)
      arrayC[k++] = arratC[i++]
     while(j<=high)
      arrayC[k++] = arrayC[j++]

     //copy all elements from low to high into original array
   }

2) a0 a1 a2 a3 a4
   Recusively divide till u are left with 1 element
    then start merge
   First a0 and a1 get sorted and merged
   a2 and a3 get sorted merged
   a2, a3 with a4 get merged
   finally all a0 till a4 get sorted merged

3) Time complexity in all cases is nlgn
4) Space complexity is lgn
5) Its a stable sort
    Stability happens because of the below logic
     when keys are equal
       arrayC[i]<= arrayC[j]
        we copy the first sub array.

     5(1), 5(2)
    copied as 5(1) , 5(2)


 */

public class MergeSort {
}
