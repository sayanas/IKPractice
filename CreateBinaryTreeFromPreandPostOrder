/**
 * Created by swagatb on 5/16/17.
 */
import java.util.*;
import java.lang.*;

public class H49 {
    static int preIndex = 0;
    static int postIndex =0;
    static class Node
    {
        int val;
        Node lchild;
        Node rchild;
        Node(int _v)
        {
            val = _v;
            lchild = null;
            rchild = null;
        }
    }
    public static int findInorderIndex(int[] inOrder, int element)
    {
        int i=0;
        for(i=0; i<inOrder.length; i++)
            if(inOrder[i]==element)
                break;
        return i;
    }
    public static Node buildTree(int[] preOrder, int[] inOrder, int left, int right)
    {
        if(left>right)
            return null;
        int element = preOrder[preIndex++];
        Node x = new Node(element);
        if(left == right)
            return x;
        int inIndex = findInorderIndex(inOrder, element);
        int l = left;
        int r = inIndex-1;
        x.lchild = buildTree(preOrder, inOrder, l, r);
        l = inIndex+1;
        r = right;
        x.rchild = buildTree(preOrder, inOrder, l, r);
        return x;
    }
    public static Node buildTree1(int[] postOrder, int[] inOrder, int left, int right)
    {
        if(left>right)
            return null;
        int element = postOrder[postIndex--];
        Node x = new Node(element);
        if(left == right)
            return x;
        int inIndex = findInorderIndex(inOrder, element);
        int l = inIndex+1;
        int r = right;
        x.rchild = buildTree1(postOrder, inOrder, l, r);
        l = left;
        r = inIndex-1;
        x.lchild = buildTree1(postOrder, inOrder, l, r);
        return x;
    }
    public static void main(String[] args)
    {
        int[] preOrder = {7, 5, 3, 1, 6, 2};
        int[] inOrder = {5, 7, 1, 3, 6, 2};
        int[] postOrder = {5, 1, 2, 6, 3, 7};
        Node root = buildTree(preOrder, inOrder, 0, inOrder.length-1);
        postIndex = postOrder.length-1;
        Node root1 = buildTree1(postOrder, inOrder, 0, inOrder.length - 1);
    }
}
